#Requires AutoHotkey v2.0
#SingleInstance force

未定义 := ""
未定义处理方式 := "未定义处理方式"
整数类型 := "Integer"
浮点数类型 := "Float"
字符串类型 := "String"
数组类型 := "Array"
当前活动窗口 := "A"
配置 := A_Args.Length ? A_Args[1] : "配置.ini"
函数参数分隔符 := IniRead(配置, "缺省值", "函数参数分隔符", ":")
列表分隔符 := IniRead(配置, "缺省值", "列表分隔符", "|")
一小会儿 := IniRead(配置, "缺省值", "一小会儿", 3000)
一小小会儿 := IniRead(配置, "缺省值", "一小小会儿", 1000)
忽略断点 := IniRead(配置, "缺省值", "忽略断点", true)
允许弹窗提示 :=  IniRead(配置, "缺省值", "允许弹窗提示", true)
流程 := IniRead(配置, "流程")
图片查询匹配参数 := IniRead(配置, "缺省值", "图片查询匹配参数", "*128")
找到图片位置后偏移量x :=  IniRead(配置, "缺省值", "找到图片位置后偏移量x", 10)
找到图片位置后偏移量y :=  IniRead(配置, "缺省值", "找到图片位置后偏移量y", 5)

校验类型(值, 类型)
{
    值类型 := Type(值)
    if not 值类型 == 类型
    {
        断点 值类型 "与" 类型 "数据类型不匹配"
        return false
    }
    return true
}

按图索骥(&横坐标, &竖坐标, 左上角x, 左上角y, 右下角x, 右下角y, 图片)
{
    横坐标 := 横坐标 := 0
    ret := ImageSearch(&横坐标, &竖坐标, 左上角x, 左上角y, 右下角x, 右下角y, 图片)
    if 0 == ret
        弹窗 "没找到目标: " 左上角x "," 左上角y "," 右下角x "," 右下角y "," 图片
}

点击(目标坐标)
{
    目标坐标x := 目标坐标[1]
    目标坐标y := 目标坐标[2]
    if IsNumber(目标坐标x) and IsNumber(目标坐标y)
        Click 目标坐标x, 目标坐标y
    else
        弹窗 "不执行点击: " 目标坐标x ", " 目标坐标y
}

找到图片位置后点击(图片, 操作参数)
{
    偏移量x := 操作参数[1]
    偏移量y := 操作参数[2]
    宽度 := 高度 := 目标坐标x := 目标坐标y := 0
    左上角x := 左上角y := -200
    WinGetPos ,, &宽度, &高度, 当前活动窗口
    按图索骥 &目标坐标x, &目标坐标y, 左上角x, 左上角y, 宽度, 高度, 图片查询匹配参数 " " 图片
    if 校验类型(目标坐标x, 整数类型) and 校验类型(目标坐标y, 整数类型)
        点击 [目标坐标x + 偏移量x, 目标坐标y + 偏移量y]
    else
        弹窗 "目标坐标不存在: " 目标坐标x ", " 目标坐标y
}

找到图片位置后输入文本(图片, 操作参数)
{
    相对偏移量 := 操作参数[1]
    内容 := 操作参数[2]
    找到图片位置后点击 图片, 相对偏移量
    输入 内容
}

对文件进行操作(操作参数*)
{
    if 操作参数.Length < 2
    {
        弹窗 "缺少参数"
    }
    else
    {
        文件 := 操作参数[1]
        操作函数 := 操作参数[2]
        函数参数 := 操作参数[3]
        if FileExist(文件)
            %操作函数%(文件, 函数参数)
        else
            弹窗 文件 "文件不存在"
    }
}

弹窗(操作参数*)
{
    提示信息 := 操作参数[1]
    if 允许弹窗提示
        Msgbox 校验类型(提示信息, 字符串类型) ? 提示信息 : 提示信息[1]
}

断点(操作参数*)
{
    内容 := 操作参数[1]
    if not 忽略断点
        弹窗 内容
}

休息(操作参数*)
{
    时长 := 操作参数[1]
    Sleep IsNumber(时长) ? 时长 
    : 校验类型(时长, 字符串类型) ? %时长% 
    : 校验类型(时长, 数组类型) ? %时长[1]% 
    : 一小会儿
}

输入(操作参数*)
{
    内容 := 操作参数[1]
    SendText 校验类型(内容, 字符串类型) ? 内容
    : 校验类型(内容, 数组类型) ? 内容[1]
    : 未定义处理方式
}

运行(操作参数*)
{
    程序 := 操作参数[1]
    return Run(程序[1])
}

激活(操作参数*)
{
    窗口标题 := 操作参数[1]
    WinActivate IniRead(配置, 窗口标题[1])
}

热键(操作参数*)
{
    热键 := 操作参数[1]
    热键列表 := IniRead(配置, 热键[1])
    loop parse 热键列表 , "`n", "`r"
    {
        Send A_Loopfield
        休息 一小小会儿
    }
}

依次查找图片并点击(操作参数*)
{
    图库 := 操作参数[1]
    if 校验类型(图库, 字符串类型)
    {
        图片 := 未定义
        相对偏移量 := 操作参数[2]
        loop parse, 图库, "`n", "`r"
        {
            图片 := A_LoopField
            断点 "对文件进行操作: " 图片
            对文件进行操作 图片, "找到图片位置后点击", 相对偏移量
            休息 一小小会儿
        }
    }
    if 校验类型(图库, 数组类型)
        依次查找图片并点击  IniRead(配置, 图库[1]),
        图库.Has(2) and 图库.Has(3) ? [图库[2], 图库[3]]
        : [找到图片位置后偏移量x, 找到图片位置后偏移量y]
}

依次查找图片并输入文本(操作参数*)
{
    图文库 := 操作参数[1]
    if 校验类型(图文库, 字符串类型)
    {
        图片 := 文字 := 未定义
        相对偏移量 := 操作参数[2]
        loop parse, 图文库, "`n", "`r"
        {
            图文 := StrSplit(A_LoopField, 列表分隔符)
            图片 := 图文[1]
            文字 := 图文.Has(2) ? 图文[2] : 未定义
            对文件进行操作 图片, "找到图片位置后输入文本", [相对偏移量, 文字]
            休息 一小小会儿
        }
    }
    if 校验类型(图文库, 数组类型)
        依次查找图片并输入文本 IniRead(配置, 图文库[1]),
        图文库.Has(2) and 图文库.Has(3) ? [图文库[2], 图文库[3]]
        : [找到图片位置后偏移量x, 找到图片位置后偏移量y]
}

执行(操作参数*)
{
    流程 := 操作参数[1]
    if 校验类型(流程, 字符串类型)
    {
        loop parse 流程 , "`n", "`r"
        {
            条目 := StrSplit(A_LoopField, 函数参数分隔符)
            函数 := 条目[1]
            参数 := StrSplit(条目[2], 列表分隔符)
            for 索引, 内容 in 参数
                参数[索引] := LTrim(内容, " ")
            %函数%(参数)
        }
    }
    if 校验类型(流程, 数组类型)
        for 内容 in 流程
            执行 IniRead(配置, 内容)
}

主程序()
{
    执行 流程
}

主程序